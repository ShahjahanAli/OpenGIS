/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package map;

import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.List;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import main.OpenGIS_MAIN;
import org.nocrala.tools.gis.data.esri.shapefile.exception.InvalidShapeFileException;

/**
 *
 * @author Shahjahan
 */
public class MapLayer_Form extends javax.swing.JFrame {

    /**
     * Creates new form MapLayer_Form
     */
    private OpenGIS_MAIN MAIN;
    private int ShapeNumber = 0;
    private int Progress = 0;

    private String FileAddress = null;
    private List<String> FilesAddress = new ArrayList<>();
    private List<String> FilesName = new ArrayList<>();

    public MapLayer_Form() throws HeadlessException {
        initComponents();
    }

    public MapLayer_Form(int Progress) {
        setProgress(Progress);
        this.ProgressBar.setValue(Progress);
        ProgressPanel.revalidate();
        ProgressPanel.repaint();
//        System.out.println("Set Progress: " + Progress);
    }

    public MapLayer_Form(OpenGIS_MAIN MAIN) {
        initComponents();
        this.MAIN = MAIN;
        ShapeNumber = ShapeNumberSlider.getValue();
        ShapeCounter.setText("" + ShapeNumberSlider.getValue() * 1000);
    }

    public int getProgress() {
        return Progress;
    }

    public void setProgress(int Progress) {
        this.Progress = Progress;
    }

    public void DoSomething() {
        System.out.println("Progress: " + getProgress());
        this.ProgressBar.setValue(getProgress());
        ProgressPanel.revalidate();
        ProgressPanel.repaint();
    }

    public void DoRepainting() {
        Timer T = new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Progress: " + getProgress());
                ProgressBar.setValue(getProgress());
                ProgressPanel.revalidate();
                ProgressPanel.repaint();
            }
        });
        T.setDelay(1);
        T.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ShapeNumberSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        Open = new javax.swing.JButton();
        MapLayerName = new javax.swing.JLabel();
        LoadMap = new javax.swing.JButton();
        ShapeCounter = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        LayerType = new javax.swing.JComboBox<>();
        ProgressPanel = new javax.swing.JPanel();
        ProgressBar = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        SingleLayerCheckBox = new javax.swing.JCheckBox();
        MultipleLayerCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Map Layer");

        ShapeNumberSlider.setMajorTickSpacing(20);
        ShapeNumberSlider.setMaximum(300);
        ShapeNumberSlider.setMinorTickSpacing(10);
        ShapeNumberSlider.setPaintLabels(true);
        ShapeNumberSlider.setPaintTicks(true);
        ShapeNumberSlider.setSnapToTicks(true);
        ShapeNumberSlider.setValue(10);
        ShapeNumberSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ShapeNumberSliderStateChanged(evt);
            }
        });
        ShapeNumberSlider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ShapeNumberSliderPropertyChange(evt);
            }
        });

        jLabel1.setText("Select Vector Map:");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });

        MapLayerName.setText("Map Layer Name");

        LoadMap.setText("Load Map");
        LoadMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadMapActionPerformed(evt);
            }
        });

        ShapeCounter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ShapeCounter.setText("Counter");

        jLabel2.setText("Load:");

        jLabel3.setText("Vector Layer Type:");

        LayerType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Building", "Road", "Railways", "Waterways", "Waterbody", "Natural", " " }));

        ProgressBar.setStringPainted(true);

        javax.swing.GroupLayout ProgressPanelLayout = new javax.swing.GroupLayout(ProgressPanel);
        ProgressPanel.setLayout(ProgressPanelLayout);
        ProgressPanelLayout.setHorizontalGroup(
            ProgressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProgressPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        ProgressPanelLayout.setVerticalGroup(
            ProgressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProgressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel4.setText("Selection Type:");

        SingleLayerCheckBox.setSelected(true);
        SingleLayerCheckBox.setText("Single Layer");
        SingleLayerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SingleLayerCheckBoxActionPerformed(evt);
            }
        });

        MultipleLayerCheckBox.setText("Multiple Layer");
        MultipleLayerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultipleLayerCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ShapeNumberSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ShapeCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Open, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LayerType, 0, 133, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(MapLayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SingleLayerCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(MultipleLayerCheckBox))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(ProgressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(LoadMap)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(SingleLayerCheckBox)
                    .addComponent(MultipleLayerCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Open)
                    .addComponent(MapLayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(LayerType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ShapeCounter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ShapeNumberSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(ProgressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(LoadMap, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    int FileCounter = 0;
    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        File selectedFile = null;
        File[] selectedFiles = null;
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        if (SingleLayerCheckBox.isSelected()) {
            fileChooser.setMultiSelectionEnabled(false);
        } else {
            fileChooser.setMultiSelectionEnabled(true);
        }

        fileChooser.setFileFilter(new FileNameExtensionFilter("ESRI Shapefile", "shp"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            if (SingleLayerCheckBox.isSelected()) {
                selectedFile = fileChooser.getSelectedFile();
                MapLayerName.setText(selectedFile.getName());
                FilesAddress.add(selectedFile.getAbsolutePath());
                FilesName.add(selectedFile.getName());
                System.out.println("Selected file: " + FilesAddress.get(0).toString());
            } else {
                selectedFiles = fileChooser.getSelectedFiles();
                for (int i = 0; i < selectedFiles.length; i++) {
                    FileCounter++;
                    MapLayerName.setText(selectedFiles[i].getName());
                    FilesAddress.add(selectedFiles[i].getAbsolutePath());
                    FilesName.add(selectedFiles[i].getName());
                    System.out.println("Selected file: " + FilesAddress.get(i).toString());
                }
                System.out.println("Total File to Load: " + FileCounter);
            }
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void ShapeNumberSliderPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ShapeNumberSliderPropertyChange

    }//GEN-LAST:event_ShapeNumberSliderPropertyChange

    private void ShapeNumberSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ShapeNumberSliderStateChanged
        if (ShapeNumberSlider.getValueIsAdjusting()) {
            ShapeCounter.setText("" + ShapeNumberSlider.getValue() * 1000);
        } else {
            ShapeNumber = ShapeNumberSlider.getValue();
            System.out.println("Value is: " + ShapeNumber);
        }
    }//GEN-LAST:event_ShapeNumberSliderStateChanged

    private void LoadMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadMapActionPerformed
//        DoRepainting();
        Thread T = new Thread(new Runnable() {
            @Override
            public void run() {
                MAIN.setShapefileLoadComplete(false);
                MAIN.LoadShapeFile(FilesAddress, FilesName, ShapeNumber * 1000, LayerType.getSelectedItem().toString());
                dispose();
            }
        });
        T.start();
//        htb_parent.LoadShapeFile(FilesAddress, FilesName ,ShapeNumber * 1000, LayerType.getSelectedItem().toString());
//        this.dispose();
    }//GEN-LAST:event_LoadMapActionPerformed

    private void SingleLayerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SingleLayerCheckBoxActionPerformed
        if (SingleLayerCheckBox.isSelected()) {
            MultipleLayerCheckBox.setSelected(false);
        } else {
            SingleLayerCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_SingleLayerCheckBoxActionPerformed

    private void MultipleLayerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultipleLayerCheckBoxActionPerformed
        if (MultipleLayerCheckBox.isSelected()) {
            SingleLayerCheckBox.setSelected(false);
        } else {
            MultipleLayerCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_MultipleLayerCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapLayer_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapLayer_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapLayer_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapLayer_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapLayer_Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> LayerType;
    private javax.swing.JButton LoadMap;
    private javax.swing.JLabel MapLayerName;
    private javax.swing.JCheckBox MultipleLayerCheckBox;
    private javax.swing.JButton Open;
    public static javax.swing.JProgressBar ProgressBar;
    public static javax.swing.JPanel ProgressPanel;
    private javax.swing.JLabel ShapeCounter;
    private javax.swing.JSlider ShapeNumberSlider;
    private javax.swing.JCheckBox SingleLayerCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
